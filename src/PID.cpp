#include "PID.h"

using namespace std;

#include <cmath>
/*
* TODO: Complete the PID class.
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PID::PID() {}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PID::~PID() {}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PID::Init(double Kp, double Ki, double Kd) {
  this->Kp = Kp;
  this->Ki = Ki;
  this->Kd = Kd;
  last_timestamp_ = system_clock::now();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PID::Update(double error) {

  auto now = system_clock::now();
  double dt = std::chrono::duration_cast<std::chrono::milliseconds>(now-last_timestamp_).count();
  this->realtive_timestamp += dt;

  calculate(error, dt);

  //this->correction *= speed;
  this->old_error_ = error;
  this->last_timestamp_ = now;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PID::calculate(double error, double dt)
{
  static double diff_t_avg = 0;

  double p, i, d, diff_t;
  this->error_sum += error;
  this->error_sum_abs += std::fabs(error);
  this->error_sum_sum += error_sum;

  std::cout << this->error_sum_sum << std::endl;
  this->counter++;

  p = -this->Kp * error;
  i = this->Ki * this->error_sum;
  diff_t = error - this->old_error_;

  diff_t_avg = ((counter-1)*diff_t_avg + std::abs(diff_t))/counter;

  d = this->Kd* (diff_t)*(dt*1e-3);
  correction = p-i-d;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double PID::GetTotalError() const{
  return this->error_sum;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double PID::GetAveragedError() const {
  return this->error_sum_abs / counter;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double PID::GetTimeStamp() const {
  return this->realtive_timestamp;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double PID::GetCorrection() const {
  return this->correction;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


